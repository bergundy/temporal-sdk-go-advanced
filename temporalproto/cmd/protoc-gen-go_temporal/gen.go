package main

import (
	"fmt"
	"log"

	"google.golang.org/protobuf/compiler/protogen"
)

type gen struct {
	*protogen.Plugin
	*protogen.File
	*protogen.GeneratedFile

	// The current service
	svc *service
}

func (g *gen) gen() error {
	// We only generate services
	if len(g.Services) == 0 {
		return nil
	}
	g.GeneratedFile = g.NewGeneratedFile(g.GeneratedFilenamePrefix+"_temporal.pb.go", g.GoImportPath)

	// Header
	g.P("// Code generated by protoc-gen-go_temporal. DO NOT EDIT.")
	g.P()
	g.P("package ", g.GoPackageName)
	g.P()

	// Generate each service
	var hadErrors bool
	for _, svc := range g.Services {
		if errs := g.genService(svc); len(errs) > 0 {
			hadErrors = true
			for _, err := range errs {
				log.Printf("ERROR on service %q: %v", svc.Desc.Name(), err)
			}
		}
	}
	if hadErrors {
		return fmt.Errorf("one or more errors during generation")
	}
	return nil
}

func (g *gen) genService(svc *protogen.Service) (errs []error) {
	g.svc, errs = newService(svc)
	if len(errs) > 0 {
		return
	}
	g.genConstants()
	g.genClient()
	g.genWorker()
	return
}

func (g *gen) genConstants() {
	g.P("// Constants used as workflow, activity, query, and signal names.")
	g.P("const (")
	for _, v := range g.svc.workflows {
		g.P(g.prefix(), v.GoName, "Name = ", fmt.Sprintf("%q", v.Desc.FullName()))
	}
	for _, v := range g.svc.activities {
		g.P(g.prefix(), v.GoName, "Name = ", fmt.Sprintf("%q", v.Desc.FullName()))
	}
	for _, v := range g.svc.queries {
		g.P(g.prefix(), v.GoName, "Name = ", fmt.Sprintf("%q", v.Desc.FullName()))
	}
	for _, v := range g.svc.signals {
		g.P(g.prefix(), v.GoName, "Name = ", fmt.Sprintf("%q", v.Desc.FullName()))
	}
	for _, v := range g.svc.calls {
		g.P(g.prefix(), v.GoName, "SignalName = ", fmt.Sprintf("%q", v.Desc.FullName()))
		g.P(g.prefix(), v.GoName, "ResponseName = ", v.GoName, `SignalName + "-response"`)
	}
	g.P(")")
	g.P()
}

func (g *gen) prefix() string {
	// TODO(cretz): Support prefix
	return ""
}

func (g *gen) privatePrefixed(suffix string) string {
	return private(g.prefix() + suffix)
}

func (g *gen) goContext() string {
	return g.QualifiedGoIdent(contextPackage.Ident("Context"))
}

func (g *gen) workflowContext() string {
	return g.QualifiedGoIdent(workflowPackage.Ident("Context"))
}
